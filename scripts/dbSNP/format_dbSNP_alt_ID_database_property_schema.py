'''
Author:  Samantha Piekos
Date:  09/30/20
Name:  format_dbSNP_alt_ID_database_property_schema.py
Description: Write all unique databases that have alternative IDs for genetic variant for a .vcf or .txt input file
as properties of GeneticVariant.

@file_input		input .vcf or .txt file of genetic variants
@file_output	mcf output file recording all databases with alternative IDs for genetic variants as properties of GeneticVariant
'''

import sys
import re

def clean_alt_db_IDs(item):
	'''
	Replace unusual characters and fix typos in the names of databases with alternative IDs for genetic variants.
	@item	string of database with alternative IDs for genetic variants than rsIDs
	@return	cleaned up string of database with alternative IDs for genetic variants than rsIDs
	'''
	item = item.replace("\\x2c_", "_")  # replace unusual characters
	item = item.replace("\\x2c", "_")
	item = item.replace('_@_', '_')
	item = item.replace("\\x59_", "_")
	item = item.replace('_-_', '_')
	if item.startswith('eiden'):
		item = 'L' + item
	if item.startswith('llumina'):
		item = 'I' + item
	item = item[0].lower() + item[1:]  # make sure first character of the name is lowercase
	return(item)

def collect_alt_db_IDs(db_IDs, set_alt_db_IDs):
	'''
	For each genetic variant instance add all databases with an alternative ID for it to a set.
	@db_IDs			string of all databases with alternative IDs for a given genetic variant instance
	@set_alt_db_IDs	set of all databases with alternative IDs for the genetic variant
	@return			set of all databases with alternative IDs for genetic variants
	'''
	list_existing_ID_prop = ['dbvar', 'clinvar', 'pharmgkb']
	pops = db_IDs.split(',')
	for item in pops:
		if item.lower() in list_existing_ID_prop or len(item) == 0:  # remove those with existing schema
			return(set_alt_db_IDs)
		item = clean_alt_db_IDs(item)
		if re.match("^[a-zA-Z]+.*", item):
			set_alt_db_IDs.add(item.split(':')[0])
	return(set_alt_db_IDs)

def compile_freq_pop_list(file_input):
	'''
	Compile list of all populations for genetic variant frequencies.
	@file_input	input .vcf or .txt file of genetic variants
	@return		unique list of all populations recording genetic variant frequencies
	'''
	set_alt_db_IDs = set()
	f = open(file_input, mode='r')
	for line in f:
		line = line.strip('\r\n').split('\t')
		values = line[7].split(';')
		for item in values:
			if item.startswith("CLNVI="):
				set_alt_db_IDs = collect_alt_db_IDs(item.strip('CLNVI='), set_alt_db_IDs)
	return(list(set_alt_db_IDs))

def check_database_ID_length(list_alt_db_IDs):
	'''
	Double check that all the dcids generated using the database names will be less than 256 characters.
	Print out database names that fail this check and truncate it.

	@list_alt_db_IDs			unique list of all populations recording genetic variant frequencies
	@list_alt_db_IDs_truncated	unique list of all populations recording genetic variant frequencies with names limited to first 137 characters
	'''
	list_alt_db_IDs_truncated = []
	for item in list_alt_db_IDs:
		if len(item) > 253:
			print('This database name exceeds the length allowed for dcids: ' + item)
			print('Truncated database name to the first 137 characters.')
			item = item[0:253]
		list_alt_db_IDs_truncated.append(item)
	return(list_alt_db_IDs_truncated)

def write_mcf(file_output, list_alt_db_IDs):
	'''
	Write all populations recording genetic variant frequencies as enums of class
	GenVarSourceEnum to an output mcf file.
	@file_output	mcf output file recording all databases with alternative IDs for genetic variants as properties of GeneticVariant
	@return			unique list of all populations recording genetic variant frequencies
	'''
	w = open(file_output, mode='w')
	w.write('# Generated by script format_dbSNP_alt_ID_database_property_schema.py\n\n')
	for item in list_alt_db_IDs:
		w.write('Node: dcid:'+ item + '_ID\n')
		w.write('name: "' + item + '_ID"\n')
		w.write('typeOf: schema:Property\n')
		w.write('rangeIncludes: schema:Text\n')
		w.write('domainIncludes: dcs:GeneticVariant\n')
		w.write('description: "The ID used by database ' + item + ' for a genetic variant."\n')
		w.write("\n")

def main():
	file_input = sys.argv[1]
	file_output = sys.argv[2]
	list_alt_db_IDs = compile_freq_pop_list(file_input)
	list_alt_db_IDs_truncated = check_database_ID_length(list_alt_db_IDs)
	write_mcf(file_output, list_alt_db_IDs_truncated)

if __name__ == "__main__":
    main()
    
